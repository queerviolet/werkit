@[Workshop] Many Minor Matters
@  author   `Ashi Krishnan <hi@ashi.io>`

  @[Concept] Introduction
  Many minor matters is a mechanism for maintainably managing many markups
  (or downs).

  Hi.
    @[Action] Say again?
    MMM uses indentation and a very light syntax to distinguish between embedded
    pieces of text in different languages. This is to solve the various escaping
    problems that can happen when you try to, for example, write `JS` code or
    *Markdown* inside JSX.

    This file starts with a matter header with a single prop.
    
  @[Concept] About matters
    @[Action] Simple matters
    This is what a matter looks like: indented, and with a head at the top.
    Indented lines without tags are not considered new matters.

      @[Hint]
      This matter is a Hint. It'll generate a `<Hint>` tag in the JSX output. That's
      the extent of what MMM knows about what it's doing---it's a very thin wrapper
      on top of JSX.

    @[Action] Separators and leaf blocks

    MMM aims to get out of the way of whatever languages you want to write about:

      @---[Code] mmm
      @-[Code] js
      // This is a tag with a separator. The separator is the '-' before the
      // [Code], and it tells MMM that this matter is a *leaf*. MMM will not
      // try to parse deeper Matters.
      /*
        So,
          @[This]
          is not a new matter.
      */
      // MMM will still try to parse consecutive Matters, though. You must
      // include the separator again, like this:  
      
      @-[Code] python
      # The purpose of all this is to keep MMM from getting tripped up on 
      # languages where '@[' is a reasonable way to start a line.

      @-[Code] objc  
      // So we can show an array literal in objective C, for instance:
      @[@"Apples", @"Bananas", @"Cucumbers"];    

  When displayed, the above matters look like:

      @-[Code] js
      // This is a tag with a separator. The separator is the '-' before the
      // [Code], and it tells MMM that this matter is a *leaf*. MMM will not
      // try to parse deeper Matters.
      /*
        So,
          @[This]
          is not a new matter.
      */
      // MMM will still try to parse consecutive Matters, though. You must
      // include the separator again, like this:  
      
      @-[Code] python
      # The purpose of all this is to keep MMM from getting tripped up on 
      # languages where '@[' is a reasonable way to start a line.

      @-[Code] objc  
      // So we can show an array literal in objective C, for instance:
      @[@"Apples", @"Bananas", @"Cucumbers"];

    @[Action] Using HTML tags

    MMM compiles to JSX. You can use HTML tags just like you would in JSX---just
    reference by using a lower case tag.

      @-[Code] mmm
      @[pre]
      Hello.
    
    Looks like this:

      @[pre]
      Hello.

    @[Action] Props

    You can specify props to give to a component (or tag).
    
    Props are specified by a `@`, *followed by whitespace*, then the name of the prop,
    more spaces, then the prop's value. The whitespace between the `@` and the prop is
    non-optional (this disambiguates it from other MMM directives, like `@import`).

    Prop values must be valid JS expressions; they are inserted directly into the
    generated JSX output:

      @-[Code] mmm 
      @[strong]
      @  style {backgroundColor: 'lightblue'}
      Boo!

    Renders this:

      @[strong]
      @  style {backgroundColor: 'lightblue'}
      Boo!
    
    You can even use functions.

    All together then, here's the Matter for a working button:

      @-[Code] mmm
      @[button]
      @  style         {backgroundColor: 'fuchsia', padding: '9px', color: 'white'}
      @  data-message  `Hi there.`
      @  onClick       evt => window.alert(evt.target.dataset.message)
      Click me, please!

    It renders as this:

      @[button]
      @  style        {backgroundColor: 'fuchsia', padding: '9px', color: 'white'}
      @  data-message `Hi there.`
      @  onClick      evt => window.alert(evt.target.dataset.message)
      Click me, please!
    
    I don't know if that's useful, exactly. MMM is explicitly not designed to be
    a good way to express programmic structures. For that, you'll probably want
    to use JSX.

    @[Action] Inclusions
    This is an inclusion:

      @-[Code] mmm
      @[...] ./intro.mmm
  
    It includes all the matters from intro.mmm right here.

  @[Concept] Things that don't work yet  
    @[Action] Evaluation blocks
    This is an evaluation block:

      @-[Code] mmm
      @!#
      const data = require('./data')
          , mapper = require('./mapper')
      return data.map(mapper)
    
    It lets you insert JS code, which will be evaluated in an IFFE.
  
    Evaluation blocks don't work yet.

    @[Action] @import directives  
    Right now, MMM prays that everything it needs is global. This is true,
    because werkit uses the webpack ProvidePlugin to inject some global-ish names,
    like Workshop, Concept, Action, and so on.

    In general, it would be nice to be able to insert `import` statements in the
    top of the generated file. Maybe any kind of statement? I think the syntax
    will look like this:

      @-[Code] mmm
      @import {Workshop} from 'kubo/components'
    
    These don't work yet either.