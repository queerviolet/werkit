@[Concept] Sass and Grids 
  @[Action] Intro to Sass 
  CSS by itself is not a complete programming language (to be technical, it isn't [Turing complete](http://en.wikipedia.org/wiki/Turing_completeness)). It doesn't support dynamic concepts like variables, functions, loops, operators, etc. This makes creating reusable CSS a real challenge.

  Sass (Syntactically Awesome StyleSheets) gives CSS these additional capabilities. We'll write our Sass using a syntax called SCSS, a superset of CSS that is *preprocessed* — the Sass preprocessor script takes a `.scss` file and converts it into an ordinary `.css` file.

  Sass is a simple add-on but it makes CSS much more powerful. Review the outline of the guide [here](http://sass-lang.com/guide).

  # Helpful Resources

  Take a quick skim through these guides, just to acquaint yourself where information is organized in each. You may need to refer to some of the documentation through this workshop.

  - [Bootstrap CSS](http://getbootstrap.com/css/)
  - [The Bootstrap Modern Theme](http://startbootstrap.com/template-overviews/modern-business/)
  - [Normalize.css](http://necolas.github.io/normalize.css/)
  - [SCSS Guide](http://sass-lang.com/guide)

  @[Action] Using Sass in Our App 
  Browse around the application and get a sense of how it fits together.

  Our Express server uses static routing to send ordinary HTML pages (no templates today!), and it's also already partly styled - there are global styles defined in `assets/stylesheets/modern-business.scss`, navbar styles are located in navbar.scss, and we’re using normalize.scss to give our styles some cross-browser compatibility. Finally, all of these stylesheets are being imported in shoestring.scss. 

  However, our app lacks a lot of other styling, including layout or responsive styling. We will not write `.css` files directly; instead, we will write `.scss` (Sass) files. Our build process (`npm run build-css`) will automatically *compile* the Sass into vanilla CSS and place it in the **public/stylesheets** static folder so that it is available to clients.

  Accordingly, you should do most of your work in **/assets/stylesheets/shoestring.scss**. You can also use `@import` to break down your style definitions into separate modules (files). By the end, **shoestring.scss** might start with a series of `@import`s like this:

  ```css
  @import "normalize";
  @import "variables";
  @import "grid";
  @import "form";
  ```

  Any variables you define in **variables.scss** (e.g. global colors) will be available in stylesheets that import it.

  ---

  **WARNING**: Don't edit any of the CSS files that appear in **/public/stylesheets**. Since these files are being generated by the Sass compiler, they are over-written every time the server restarts! You should do all your work in the Sass files.

  @[Action] Grid Systems 
  Hopefully by now you have seen that a *grid system* (like the one in Bootstrap) makes designing layouts easy. Learning how to implement such a system ourselves will help solidify our knowledge of CSS.

  ---

  The first three classes that you will notice in the **home.html** file are `container`, `row` and `col-lg-12`.

  | `container` | `row` | `col-lg-12` |
  |-------------|-------|-------------|
  | centered on the page; clears floats | wraps a series of columns; height expands to the largest of any internal columns | A column (col) for a large screen (lg) that covers 12 grid widths

  Columns have a couple properties:

  * Some padding defined by the size of the gutter in your grid layout.
  * A width defined by the percentage of grid units they take up. In the case of a 12-unit-wide column, it's easy: 100%. Otherwise, it's the number provided by the class name divided by the number of grid units, written as a percentage.

  ---

  Below is some basic styling that fulfills those requirements. Add the following to your Sass files. We won't see any visual improvement yet, but we've started to build a solid grid framework.

  ```css
  .container {
    margin-left: auto;
    margin-right: auto;
    clear: both;
  }

  .row {
    clear: both;
  }

  .col-lg-12 { 
    width: 100%;
  }
  ```
  <hint title="SCSS and columns">
  Using a loop `@for` could help us make all of the column classes (1-12) dynamically without having to write each individually. 
  </hint>
  # Extra Resources

  * [Create Your Own Flexible Grid System](http://www.slideshare.net/stevehickeydsgn/forget-frameworks-create-your-own-flexible-grid-system)
  * [Don't Overthink It (Grids)](http://css-tricks.com/dont-overthink-it-grids/)
  * [Rolling Your Own Grid Layouts](http://designshack.net/articles/css/rolling-your-own-grid-layouts-on-the-fly-without-a-framework/)
  * [Grids Are Good](http://www.slideshare.net/huer1278ft/grids-are-good-right)

  @[Action] Build It Already 
  Your job is to fill in the SCSS/CSS required to make your `main` and `contact` HTML pages look like these two screenshots. Doing so will complete this workshop.

  ### You should **NOT** update the HTML documents unless prompted in the workshop.

  You also might find [this article](https://css-tricks.com/centering-css-complete-guide/) helpful when trying to center anything/everything.

  **We recommend first building your own grid system as described in the previous step. This grid system should allow for correct layout based on the `container`, `row`, `lg` classes found in `main.html` and `contact.html`. The `md` and `sm` classes will be used in later steps.**

  **Work one `<section>` at a time and try your best to get the site looking similar to the images below. Use padding and margin to make small adjustments.**

  <hint title="Workflow">
  Having trouble with where to start?
  ### How to think through this workshop
  - Take note of the classes on an element
  - Based on how it should end up visually write, in English, out what you want to do
  - Determine which style might fit best in which class
  - Note if other elements have the same class and if all of these styles make sense for all of these elements
  - Create the styles that mirror your English description

  ### What kind of workflow of elements though?
  - Make the basic grid
  - Continue through with the rest of the first page (ignoring the carousel)
  - Move on to the second page with the map, form, breadcrumbs, etc.
  - Make smaller edits to get it closer, but don't stress too much about perfection
  - Create a responsive design (following workshop actions)
  - Incorporate SCSS specific code (e.g. loops, mixins, etc)
  - Make the carousel functional, perfect the site or add your own flare!
  </hint>

  # Home Page 

  <img src="http://i1334.photobucket.com/albums/w641/fullstackacademy/home_zpsd3a4a23b.png" style="border:1px solid black; width:60%;">

  # Contact Page

  <img src="http://i1334.photobucket.com/albums/w641/fullstackacademy/contact_zps1384b7b2.png" style="border:1px solid black; width:60%;">