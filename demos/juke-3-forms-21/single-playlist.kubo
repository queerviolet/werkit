@[Concept] Single Playlist 
  @[Action] Single Playlist Component 
  Using the JSX below as a starting point, go ahead and build out a single playlist component.

  ```html
  <div>
    <h3>{ playlist.name }</h3>
    <Songs songs={playlist.songs} /> {/** Hooray for reusability! */}
    { playlist.songs && !playlist.songs.length && <small>No songs.</small> }
    <hr />
  </div>
  ```

  Try to get it so that clicking on a playlist from the sidebar will display the appropriate playlist. It's tricky though - here's another guide to help you on your way:

  <ol>
  <li> Create a new parameterized `Route` for the single `Playlist` component.
  </li>

  <hint title="Solution">
  <pre>
  &ltRoute path="playlists/:playlistId" component={Playlist} />
  </pre>
  </hint>

  <li> Update the `Link`s in the `Sidebar` to direct you to the appropriate playlist.
  </li>

  <hint title="Solution">
  <pre>
  {
    playlists.map(playlist => {
      return (
        &ltli key={playlist.id} className="playlist-item menu-item">
          &ltLink to={`/playlists/${playlist.id}`}>{playlist.name}</Link>
        &lt/li>
      );
    })
  }
  </pre>
  </hint>

  <li> Add a new field to our `initialState.js` to handle our "selected playlist".
  </li>

  <hint title="Solution">
  ```js
  {
    selectedPlaylist: {}
  }
  ```
  </hint>

  <li> Write a method that will receive the playlist's id, fetch the playlist from the server, and set it on state as the selected playlist. Don't forget that each song in the playlist's songs field will have to be converted by the `convertSong` method!
  </li>

  <hint title="Solution">
  <pre>
    selectPlaylist (playlistId) {
      axios.get(`/api/playlists/${playlistId}`)
        .then(res => res.data)
        .then(playlist => {
          playlist.songs = playlist.songs.map(convertSong);
          this.setState({
            selectedPlaylist: playlist
          });
        });
    }
  </pre>
  </hint>

  <li> Use the method above when the single `Playlist` component mounts to set the appropriate component on state. It should get the playlist id from the `routeParams`, just like the singular `Artist` and `Album` components.
  </li>
  </ol>

  <hint title="Solution">
  <pre>
  componentDidMount () {
    const playlistId = this.props.routeParams.playlistId;
    const selectPlaylist = this.props.selectPlaylist;
    selectPlaylist(playlistId);
  }
  </pre>
  </hint>

  If you get to this point and spend some time testing, you may notice a peculiar issue when switching *between* playlists - it doesn't seem to update! Move on to the next action and let's see what's going on here.

  <guide>
  Clicking a playlist name in the sidebar renders the playlist appropriately
  You may encounter a bug when navigating between playlists - this is okay
  </guide>

  @[Action] componentWillReceiveProps 
  Everything else is working, but if you try to switch from playlist to playlist, the component isn't updating. What the heck? 

  We're fetching the single playlist in `componentDidMount`, but when we switch from one playlist to another, the component **doesn't** re-mount! Remember that to *mount* means to get placed in the actual DOM - since the component is already in the DOM, React doesn't throw it away and mount it again.

  We can address this several ways - let's solve the problem by introducing a new lifecycle hook - [`componentWillReceiveProps`](https://facebook.github.io/react/docs/react-component.html#componentwillreceiveprops). Using this lifecycle hook, we can compare our current props with the next props the component will receive. For example, we could check and see if the playlist id we're receiving is different from the one we had before and, if so, we could fetch the new playlist and put it on state.

  **Be careful** - we need to make sure that we only fetch and re-set the playlist when the id changes. Otherwise, we could end up in an infinite loop!

  And keep in mind that we're not *replacing* our `componentDidMount`. We still need that for the initial load, because `componentWillReceiveProps` will not work effectively for this case.

  Give it a go! Remember to only check the hint if you get stuck. You'll know you've succeeded when the view updates appropriately when you switch from playlist to playlist.

  <hint title="Solution">
  ```js
    componentWillReceiveProps (nextProps) {
      const nextPlaylistId = nextProps.routeParams.playlistId;
      const currentPlaylistId = this.props.routeParams.playlistId;
      const selectPlaylist = this.props.selectPlaylist;
      if (nextPlaylistId !== currentPlaylistId)
        selectPlaylist(nextPlaylistId);
    }
  ```
  </hint>

  <guide>
  Switching between different playlists causes the correct playlists to be rendered each time
  </guide>

  @[Action] Auto Redirect 
  Now that we've got a loadable state for a single playlist, let's make it so that as soon as someone creates a new playlist, they get taken to that playlist's view. Essentially we are looking for a "frontend redirect".

  Did you know that we can directly manipulate the history object (`hashHistory`) that `react-router` gives us? Check out [this section](https://github.com/reactjs/react-router-tutorial/tree/master/lessons/12-navigating) of the tutorial for a nice reminder of how to do this.

  <guide>
  When you click submit to create a new playlist, the newly created playlist is rendered into view
  </guide>