@[Concept] Artist Filter 
  @[Action] App State vs UI State 
  Up until now, we've kept all of the state of our application centralized in the `AppContainer` component. This is important because it allows us to easily transport our application's state to the different components that need them, and it also helps make sure that our dumb components remain nice and dumb. However, sometimes we know that some kinds of state are going to be localized to particular area of our app ahead of time - state like form data, timers, small animations, etc. It would be a shame to clutter up the already busy `AppContainer` component with the state for a single input.

  Some developers like to make the distinction between what we might call our `application state`, or state that's central to our app and may be available to various different components, and `UI state` or `local state` - this would be state that we only need to handle our UI in a single place - things like forms would often be considered local state.

  Let's go ahead and write a component that manages localized state. We'll add a feature to our `Artists` component that will allow us to start typing the name of an artist into an input field, and the list of artists will narrow down to only those artist(s) whose names match our entry.

  <guide>
  You have finished reading the above
  </guide>

  @[Action] Composition 
  The filter we write should look something like this:

  <h3>Before typing anything in</h3>
  <img src="https://learndotresources.s3.amazonaws.com/workshop/581352f6b659df00039f5189/Screen%20Shot%202016-11-09%20at%202.13.54%20PM.png">

  <h3>After typing in an entry</h3>
  <img src="https://learndotresources.s3.amazonaws.com/workshop/581352f6b659df00039f5189/Screen%20Shot%202016-11-09%20at%202.14.07%20PM.png">

  Your first instinct might be to go ahead and modify the `Artists` component. However, the artist's component is already quite good at its job: if we give it a `props.artists`, it will render our list of artists. Why change it?

  Instead, let's take advantage of React's functional nature and *compose*. We know what this looks like with regular functions at this point:

  ```js
  // the add something function is very good at adding x and y
  function addSomething (x, y) {
    return x + y;
  }

  // the logSomething function is very good at logging z to the console
  function logSomething (z) {
    console.log(z);
  }

  // we can compose their functionality into one function
  function addAndLog (x, y) {
    logSomething(addSomething(x, y));
  }
  ```

  In this same vein, we'll write a new, **stateful** component that will manage the value of the filter's input, filter the artist's array, and then pass the filtered array of artists down to the `Artists` component.

  <guide>
  You have finished reading the above
  </guide>

  @[Action] FilterableArtists 
  Create a new presentational component called `FilterInput` - add it to the `react/components/` directory:

  ```js
  import React from 'react';

  const FilterInput = (props) => {
    return (
      <form className="form-group" style={{marginTop: '20px'}}>
        <input
          className="form-control"
          placeholder="Enter artist name"   
        />
      </form>
    );
  }

  export default FilterInput;
  ```

  Now we're going to write our first new `container` (read: "stateful") component to our `react/containers` directory - give it a sensible name like `FilterableArtistsContainer.js`. This stateful component is going to *compose* our `FilterInput` and `Artists` together by managing the state of the input form, and then filtering the list of artists it passes to `Artists`.

  **But first**, let's learn about the React `SyntheticEvent`!

  <guide>
  You have created the FilterInput presentational component
  You have created a file for the FilterableArtists container (but not written the component yet)
  </guide>

  @[Action] SyntheticEvent 
  Whenever you pass a callback function to an event listener like `onClick`, React will implicitly pass an `event` object to it as the first argument.

  However, React gets pretty clever with this event object. Because different browsers have the unfortunate tendency to pass different kinds of events, React wraps the native browser event with a class of its own, called `SyntheticEvent`. You can access many of the fields you've seen before when working with the DOM and jQuery, but it is a bit different (check out the [docs](https://facebook.github.io/react/docs/events.html) for more info).

  The tricky thing with `SyntheticEvent` is that React *pools* all events into the *same* `SyntheticEvent` object. This essentially means that `SyntheticEvent` is a single object allocation that React mutates at runtime. This is a nice performance win, but it also means that you can't use the event object itself asynchronously (which, don't forget, includes `setState`). This means that once you have the `SyntheticEvent`, you should grab any values that you want off of it before you do anything async - otherwise, you'll end up with an unpleasant bug on your hands.

  For example, if we wanted to collect the value of an input field, we would want to do something like this:

  ```js
  // safely get the string value from event.target
  this.setState({ inputValue: event.target.value });
  ```

  We would **not** want to do something like this:

  ```js
  // uh oh
  this.setState({ input: event });
  ```

  If we did that, by the time we actually tried to get the value, it would most likely be gone!

  <guide>
  You have finished reading the above
  </guide>

  @[Action] Guide 
  You should be equipped with the knowledge you need to implement the filter. Try doing it on your own first! If you get stuck or want more guidance though the process, here are some steps to ground you:

  <ol>
  <li> In your `index.js`, instead of rendering `Artists` when the url is `/artists`, render the `FilterableArtistsContainer`.
  </li>

  <hint title="Solution">
  <pre>
  &ltRoute path="/artists" component={FilterableArtistsContainer} />
  </pre>
  </hint>

  <li> The `FilterableArtistsContainer` itself should render both the `FilterInput` and `Artists` components.
  </li>
  <hint title="Solution">
  <pre>
  // In FilterableArtistsContainer.js
  render () {
    return (
      &ltdiv>
        &ltFilterInput />
        &ltArtists artists={/**TODO**/} />
      &lt/div>
    )
  }
  </pre>
  </hint>

  <li> Put a space on the state of the `FilterableArtistsContainer` to contain the current value entered in the input
  </li>
  <hint title="Solution">
  ```js
  // something like...
  this.state = {
    inputValue: ''
  }
  ```
  </hint>

  <li> Write a method that will collect the input value when the input form changes and set it on state. Pass this down as a prop to the `FilterInput` component and attach it to the appropriate listener.
  </li>
  <hint title="Solution">
  <pre>
  // write a method like this in FilterableInputContainer.js:
  handleChange (evt) {
    const value = evt.target.value;
    this.setState({
      inputValue: value
    });
  }

  render () {
    return (
      /** .... */
      &ltFilterInput handleChange={this.handleChange} />
      /** .... */
    )
  }

  // and then attach like so in FilterInput.js:
  &ltinput onChange={props.handleChange} />
  </pre>
  </hint>

  <li> In the render method of `FilterableArtistsContainer`, use the input value to filter the array of artists to pass to the `Artists` component.
  </li></ol>
  <hint title="Solution">
  This solution uses [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)
  <pre>
  render () {
    const inputValue = this.state.inputValue;
    const filteredArtists = this.props.artists.filter(artist =>
      artist.name.match(inputValue));
    return (
      /** ... */
      &ltArtists artists={filteredArtists} />
     /** ... */
    );
  }
  </pre>
  </hint>

  <guide>
  The input is rendered above the list of artists
  Typing into the filter causes the list of artists to become filtered appropriately
  </guide>