@[Concept] Handling Asynchronicity 
  @[Action] Remove repeated work 
  Right now, if you've implemented the commands, you'll notice a few repeated patterns:

  1.  Execute the command's work
  2.  Output the result of the command
  3.  Show the prompt and wait for the next command

  The only thing that's unique is step 1. Steps 2 and 3 are repeated for each command.  

  Let's use the power of callback functions to remove steps 2 and 3.  Create a function `done` in `bash.js` that takes in one argument `output`.  

  ``` javascript
  var done = function(output) {
    // show the output
    // show the prompt
  }
  ```

  Now pass this function into each of your command functions.  Rewrite your command functions so that they merely *create* the output string (instead of printing it directly to the `process.stdout`) and then call `done` after they've completed.

  Here's an example with ls:

  ``` javascript
  var commands = {
    ls: function(file, done) {
      var output = "";
      fs.readdir('.', function(err, files) {
        files.forEach(function(file) {
          output += file.toString() + "\n";
        })
        done(output);
      });
    }
  }
  ```

  Key takeaways:

  1. Note that `ls` is defined with an unused `file` parameter, just to keep it consistent with how all our functions are called. That's ok, what we lose in irrelevance we gain in standardization.
  * Inside `ls` we got the `done` function and then called it. `done` is referred to as a _callback_ function because it lets us call back someplace else (usually it lets us continue execution in a previous context, in this case back in our `bash.js` runner code`).
  * Even though we're doing a `fs.readdir` here which is asynchronous, because we're using the `done` callback function inside the `fs.readdir` callback function, our `bash.js` file can specify what to do with the eventual results from our `command.js` operation. Nifty!