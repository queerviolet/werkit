@[Concept] Reading Files 
  @[Action] `cat`, `head`, and `tail` 
  `cat`, `head`, and `tail`

  Refactor all your existing functions to take one explicit parameter — even if they do not actually use such a parameter. Why? We are going to make all our command functions share the same signature (order & type of parameters) so that we can call them all the same way, without knowing necessarily which one we are calling. For most of the upcoming functions, it will make sense to name that parameter file or filename or similar.

  Three powerful commands that take in one argument (a file to read) are cat filename, head filename and tail filename. **Implement these three commands using fs.readFile** (not fs.readFileSync!). 

  `cat filename.txt`

  The cat command is simple: given the command cat filename.txt, it will output the contents of filename.txt. More information can be found here.

  Figure out, using fs, how to implement this command for one file argument. 

  `head filename.txt`

  The head command outputs the first N lines of the filename.txt (default is 10 on most systems). This function will be similar to cat but only return the first N lines — let's make ours 5 for now.

  `tail filename.txt`

  The tail command is the inverse of the head command. It outputs the last N lines of the filename.txt. Our bash.js tail command will print the last 5 lines.

  As an aside, one of the most useful things that the real tail can do is watch log files; if you have a program outputting to a text file and you want to watch that file live, you can use tail -f logfile where -f means follow.

  @[Action] Revisit `ls` 
  Earlier in the workshop, you used `fs.readdirSync` to read all the files in a directory.

  Now that you've asynchronously read file contents for the `cat` command, refactor your `ls` command to use the asynchronous `fs.readdir` function.

  @[Action] Bonus: Reading multiple files 
  ###Bonus!

  You can also attempt to let cat accept a space-delimited string of filenames to read. This may be more challenging, especially if you make sure that the prompt > **is only printed after all files**, and even more tricky, maintaining the original filename order (**no readFileSync allowed**!).

  So that you make best use of your workshop time, we recommend that you complete the 'Handling Asyncronicity' section before spending time on this bonus exercise!

  @[Action] A note on callbacks 
  **This page is 100% theory (no actions required).**

  To implement `ls`, we used the **asynchronous** function `fs.readdir`. There exists a simpler, **synchronous** version of that method, `fs.readdirSync`. Throughout this workshop, however, you will be required to use async methods. This is an artificial imposition since our bash.js UI does not significantly benefit from asynchronicity; however, we want you to practice using Node.js-style callbacks for control flow. Such practice will pay off very soon when we learn Express.js.

  # Synchronous and Blocking

  `fs.readdirSync` grinds our entire program to a halt; nothing else can occur during a `readdirSync`. Since disk access is very slow compared to normal program execution, this is a pointless waste if there is anything else we might want our application to do in the meantime. We would therefore say that `fs.readdirSync` is **blocking**.

  Technically speaking, almost any normal statement in JavaScript is "blocking" in the sense that it must be executed before the next statement is performed. However, most JavaScript executes very quickly as the CPU manipulates registers, caches, and RAM. We only use the term *blocking* for something that not only prevents the JS thread from proceeding, but is also *slow*: disk reads, network requests, etc.

  # Asynchronous and Non-Blocking

  If all we had to work with was the single thread of the JavaScript runtime (V8), that would be the end of the story — slow actions would simply block our JS until completed. But V8 is only one piece of the puzzle, whether in Node or a web browser. Such *host environments* provide other *threads* that can handle work, while our JavaScript continues on its merry way. We can take advantage of those threads using host-provided **asynchronous** APIs. All asynchronous functions are just abstractions using these built-in APIs.

  *Asynchronous* means that an action occurs out-of-step with our main JS program, in the "background". Asynchronous methods like `fs.readdir` are **non-blocking**. During a background disk read, our program could (in theory) perform other actions. (We will quietly ignore that bash.js doesn't specifically take advantage of that capability.)

  # How Asynchronous Functions "Leave" and "Re-Enter" the JavaScript Thread

  When an asynchronous background operation (such as reading a directory) has completed, the host environment (Node / the browser) needs some way to communicate this back to our JS thread. The solution is for the host environment to queue up a **callback function** which will execute as soon as the JS function call stack is empty. The second argument to to `fs.readdir` is a callback. You could say that `fs.readdir` "leaves" JS, and the callback given to `fs.readdir` "re-enters" (or *calls back*) JS.

  Note that not all asynchronous methods are necessarily slow; a method might be asynchronous simply because it involves "leaving" the main JS thread. Doing a `setTimeout` with `0` delay, for example, queues up a callback to run as soon as the call stack is empty. Also, a Node program might interact with other programs, which can be fast but occurs "outside" of the JavaScript thread.

  # Final Note

   | Non-Blocking | Blocking
  ---|---|---
  Synchronous | `var x = 5`; manipulates memory (fast). Technically, JS does not proceed until this statement completes, but it completes too quickly to count as "blocking." | `fs.readdirSync`; accesses disk (slow) stopping JS in the meantime.
  Asynchronous | `fs.readdir`; accesses disk (slow) but in background, letting JS proceed in the meantime. Or: `setTimeout` with a `0` delay; fast, but also in background, letting other JS proceed in the meantime. | N/A; by definition, an asynchronous function cannot block the JS thread.

  Asynchronous functions are **extremely important** to understand. As you implement the upcoming commands, keep this in mind! You should watch this video in your off time to understand the ins and outs of asynchronous JavaScript.

  <iframe width="100%" height="480px" src="https://www.youtube.com/embed/8aGhZQkoFbQ" frameborder="0" allowfullscreen></iframe>