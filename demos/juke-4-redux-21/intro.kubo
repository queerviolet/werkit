@[Concept] Intro 
  @[Action] Preparation 
  For the next phase of Juke, we'll be learning how to implement the `Redux` system of state management into our React application. Redux itself is an *extremely* small library (you could probably write most of it yourself right now), but it enables us to write applications with a certain set of principles in mind that, if we adhere to them, will help us write manageable, predictable and scalable UIs.

  Dan Abramov, the creator of Redux, has an excellent and [free video course](https://egghead.io/courses/getting-started-with-redux) on Redux (121 minutes) that you can watch on egghead.io. *Alternatively*, if you're more of the reading-type, please read sections [1.2](http://redux.js.org/docs/introduction/), [1.3](http://redux.js.org/docs/basics/) and [1.4](http://redux.js.org/docs/advanced/) of the [Redux docs](http://redux.js.org/). Don't worry too much about the sections on `react-redux` and the `connect` method - we will introduce this in the next workshop. The videos and the docs are roughly equivalent in content, so just pick one - trying to do both would definitely be overkill.

  @[Action] Example 
  It's helpful to think about what will change in our vanilla React application once we add Redux (and its React bindings, [React-Redux](https://github.com/reactjs/react-redux)).

  # What will change
  * Where our state lives
    * Our state will no longer live in our React components - instead, it will all go in the centralized Redux `store`.
  * How our state changes
    * Using `setState` to directly affect component state will not happen directly in response to interaction and actions, but instead the Redux `store` will be updated and component state will `setState` when the `store` says it has been updated.

  # What won't change
  * Our stateless components
    * If we've been diligent about de-coupling our presentational components from our stateful components, then our presentational components should be *completely reusable*, no matter what kind of component manages their state.
  * The number of ways to mutate state and trigger a render
    * Using vanilla React, the only way to effect a state change and re-render is via `setState`. With Redux, the only way to do this is by using the `dispatch` method on the store. 

  ```js
  // just React
  import StatelessComponent from './StatelessComponent';

  class ContainerComponent extends React.Component {
    constructor (props) {
      super(props);
      this.state = { counter: 0 };
      this.increment = this.increment.bind(this);
    }

    increment () {
      this.setState(prevState => ({ counter: ++prevState.counter }));
    }

    render () {
      const {counter} = this.state;
      return <StatelessComponent counter={counter} increment={this.increment} />
    }
  }
  ```

  ```js
  // React with Redux
  import store from './store';
  import {incrementCounter} from 'action-creators';
  import StatelessComponent from './StatelessComponent';

  class ContainerComponent extends React.Component {

    constructor (props) {
      super(props);
      this.state = store.getState();
    }

    componentDidMount() {
        this.unsubscribeFromStore = store.subscribe(() => {
           this.setState(store.getState());
        });
    }

    componentWillUnmount() {
        this.unsubscribeFromStore();
    }

    increment () {
      store.dispatch(incrementCounter());
    }

    render () {
      const {counter} = this.state;
      return <StatelessComponent counter={counter} increment={this.increment} />
    }
  }
  ```

  This might seem like it's more work and more complex code up front...I agree that it is! But once our app starts to get bigger, you'll realize something critical: if you do things the Redux way, our app will get bigger and bigger, but it *won't get substantially more complex*. 

  To make an analogy to math, I like to think of Redux apps as having a logarithmic complexity: there's a bit more work to do up front, but then the difficulty of understanding the way the app works quickly evens out and only increases in small amounts as the size of the app increases. Using vanilla React, I would say that our app has a linear complexity - with growth, we'll get an equal amount of complexity in understanding it in return. However, if we were to use an object-oriented system (like we might have implemented with jQuery back in TripPlanner) rather than a functional system, I would say that we would run into something like *quadratic* complexity - as our app gets bigger, it will get substantially *much* harder to understand  because of the chain of side effects we'd need to manage.

  @[Action] Starting Point 
  ## Copy and install Juke 4 Start

  The starting point for this workshop will be supplied in your Library repo as `...Juke/4-redux/start` or similar. It's a bit different from where we left off in the previous workshop, so I recommend using it for now rather than trying to build on top of where we ended up in part 3. Copy over the source code from your solutions library and run `npm install`.